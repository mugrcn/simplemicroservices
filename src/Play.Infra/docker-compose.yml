services:
  mongo:
    image: mongo
    container_name: mongo
    ports:
      - 27017:27017
    volumes:
      - mongodbdata:/data/db
    healthcheck:
      test: [ "CMD-SHELL", "mongosh --eval 'db.adminCommand(\"ping\")' || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmqdata:/var/lib/rabbitmqdata
    hostname: rabbitmq

  catalog-service:
    build:
      context: ../
      dockerfile: Play.Catalog.Service/Dockerfile
    container_name: catalog-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RABBITMQ_HOST=rabbitmq
      - MONGO_HOST=mongo
      - ASPNETCORE_URLS=http://+:5001
      - AllowedOrigin=http://localhost:3000
      - TZ=Europe/Istanbul
    ports:
      - "5001:5001"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  inventory-service:
    build:
      context: ../
      dockerfile: Play.Inventory.Service/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RABBITMQ_HOST=rabbitmq
      - MONGO_HOST=mongo
      - ASPNETCORE_URLS=http://+:5005
      - AllowedOrigin=http://localhost:3000
      - TZ=Europe/Istanbul
    container_name: inventory-service
    ports:
      - "5005:5005"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  web-ui:
    build:
      context: ../play.web.ui # build context artÄ±k play.web.ui dizini
      dockerfile: Dockerfile # Dockerfile burada zaten var
    ports:
      - "3000:80"
    # depends_on:
    #   - catalog-service
    #   - inventory-service

    # elasticsearch:
    #   image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    #   container_name: elasticsearch
    #   environment:
    #     - discovery.type=single-node
    #     - xpack.security.enabled=false
    #   ports:
    #     - "9200:9200"
    #   healthcheck:
    #     test: [ "CMD-SHELL", "curl -s http://localhost:9200/_cluster/health || exit 1" ]
    #     interval: 10s
    #     timeout: 5s
    #     retries: 5

    # kibana:
    #   image: docker.elastic.co/kibana/kibana:8.15.0
    #   container_name: kibana
    #   environment:
    #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    #   ports:
    #     - "5601:5601"
    #   depends_on:
    #     elasticsearch:
    #       condition: service_healthy
    #   healthcheck:
    #     test: [ "CMD-SHELL", "curl -s http://localhost:5601/api/status || exit 1" ]
    #     interval: 10s
    #     timeout: 5s
    #     retries: 5

    # fluent-bit:
    #   image: fluent/fluent-bit:3.0
    #   container_name: fluent-bit
    #   volumes:
    #     - ./fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    #     - ./fluent-bit/parsers.conf:/fluent-bit/etc/parsers.conf:ro
    #     - /var/lib/docker/containers:/var/lib/docker/containers:ro
    #     - /var/run/docker.sock:/var/run/docker.sock:ro
    #   depends_on:
    #     elasticsearch:
    #       condition: service_healthy
    #   ports:
    #     - "2020:2020"
    #   environment:
    #     - FLUENT_BIT_CONF=/fluent-bit/etc/fluent-bit.conf
    #   restart: unless-stopped

volumes:
  mongodbdata:
    driver: local
  rabbitmqdata:
    driver: local
